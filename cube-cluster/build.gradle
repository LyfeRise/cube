plugins {
    id "java"
}

ext {
    lombokVersion = "1.18.20"
    hamcrestVersion = "2.2"
    junitVersion = "5.7.2"
    webSocketVersion = "1.5.2"
    logbackVersion = "1.2.3"
    jacksonVersion = "2.12.3"
}

version = "1.0"
group = "com.lyferise"

repositories {
    mavenCentral()
}

sourceSets {
    integrationTest {
        compileClasspath += sourceSets.main.output
        runtimeClasspath += sourceSets.main.output
    }
}

configurations {
    integrationTestImplementation.extendsFrom testImplementation
    integrationTestRuntimeOnly.extendsFrom testRuntimeOnly
}

dependencies {

    // implementation
    compileOnly "org.projectlombok:lombok:$lombokVersion"
    annotationProcessor "org.projectlombok:lombok:$lombokVersion"
    implementation "org.java-websocket:Java-WebSocket:$webSocketVersion"
    implementation "ch.qos.logback:logback-classic:$logbackVersion"
    implementation "com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:$jacksonVersion"
    implementation project(":cube-core")

    // test
    testCompileOnly "org.projectlombok:lombok:$lombokVersion"
    testAnnotationProcessor "org.projectlombok:lombok:$lombokVersion"
    testImplementation "org.hamcrest:hamcrest:$hamcrestVersion"
    testImplementation "org.junit.jupiter:junit-jupiter-api:$junitVersion"
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:$junitVersion"
    testImplementation project(':cube-client')

    // integrationTest
    integrationTestCompileOnly "org.projectlombok:lombok:$lombokVersion"
    integrationTestAnnotationProcessor "org.projectlombok:lombok:$lombokVersion"
}

java {
    sourceCompatibility = JavaVersion.VERSION_14
    targetCompatibility = JavaVersion.VERSION_14
}

test {
    useJUnitPlatform()
}

ext.sharedManifest = manifest {
    attributes("Main-Class" : "com.lyferise.cube.node.Application",
            "Implementation-Title": "cube-cluster",
            "Implementation-Version": file('../version.txt').text)
}

tasks.register('uberJar', Jar) {
    archiveBaseName = "lyferise-cube"
    archiveVersion = file('../version.txt').text
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    manifest = project.manifest {
        from sharedManifest
    }

    from sourceSets.main.output
    dependsOn configurations.runtimeClasspath
    from {
        configurations.runtimeClasspath.findAll { it.name.endsWith('jar') }.collect { zipTree(it) }
    }
}

task integrationTest(type: Test) {
    description = 'Runs integration tests.'
    group = 'verification'

    testClassesDirs = sourceSets.integrationTest.output.classesDirs
    classpath = sourceSets.integrationTest.runtimeClasspath

    useJUnitPlatform()
    shouldRunAfter test
}

check.dependsOn integrationTest